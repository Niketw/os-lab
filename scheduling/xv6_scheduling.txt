//replace scheduler(void scheduler(void)) in proc.c to change scheduling algorithm

// default

void
scheduler(void)
{
  struct proc *p;
  struct cpu *c = mycpu();
  c->proc = 0;
  
  for(;;){
    // Enable interrupts on this processor.
    sti();

    // Loop over process table looking for process to run.
    acquire(&ptable.lock);
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->state != RUNNABLE)
        continue;

      // Switch to chosen process.  It is the process's job
      // to release ptable.lock and then reacquire it
      // before jumping back to us.
      c->proc = p;
      switchuvm(p);
      p->state = RUNNING;

      swtch(&(c->scheduler), p->context);
      switchkvm();

      // Process is done running for now.
      // It should have changed its p->state before coming back.
      c->proc = 0;
    }
    release(&ptable.lock);

  }
}

// fcfs
void scheduler(void) {
  struct proc *p;
  struct cpu *c = mycpu();
  c->proc = 0;

  for(;;) {
    sti(); // Enable interrupts
    acquire(&ptable.lock);

    // Loop over the process table
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
      if(p->state == RUNNABLE) {
        c->proc = p;
        switchuvm(p);
        p->state = RUNNING;

        swtch(&(c->scheduler), p->context);
        switchkvm();

        c->proc = 0;
      }
    }
    release(&ptable.lock);
  }
}


//sjf
void scheduler(void) {
  struct proc *p, *shortest;
  struct cpu *c = mycpu();
  c->proc = 0;

  for(;;) {
    sti(); // Enable interrupts
    acquire(&ptable.lock);

    shortest = 0; // Reset shortest job

    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
      if(p->state == RUNNABLE) {
        if(shortest == 0 || p->run_time < shortest->run_time) {
          shortest = p;
        }
      }
    }

    if(shortest) {
      c->proc = shortest;
      switchuvm(shortest);
      shortest->state = RUNNING;

      swtch(&(c->scheduler), shortest->context);
      switchkvm();

      c->proc = 0;
    }

    release(&ptable.lock);
  }
}

//srtf
void scheduler(void) {
  struct proc *p, *shortest;
  struct cpu *c = mycpu();
  c->proc = 0;

  for(;;) {
    sti(); // Enable interrupts
    acquire(&ptable.lock);

    shortest = 0; // Reset shortest job

    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
      if(p->state == RUNNABLE) {
        if(shortest == 0 || p->remaining_time < shortest->remaining_time) {
          shortest = p;
        }
      }
    }

    if(shortest) {
      if(c->proc != shortest) {
        if(c->proc) {
          c->proc->state = RUNNABLE; // Preempt current process
        }
        c->proc = shortest;
        switchuvm(shortest);
        shortest->state = RUNNING;

        swtch(&(c->scheduler), shortest->context);
        switchkvm();
      }
    }

    release(&ptable.lock);
  }
}

//priority
void scheduler(void) {
  struct proc *p, *highP;
  struct cpu *c = mycpu();
  c->proc = 0;

  for(;;) {
    sti(); // Enable interrupts
    acquire(&ptable.lock);

    highP = 0; // Reset highest priority

    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
      if(p->state == RUNNABLE) {
        if(highP == 0 || p->priority < highP->priority) {
          highP = p;
        }
      }
    }

    if(highP) {
      c->proc = highP;
      switchuvm(highP);
      highP->state = RUNNING;

      swtch(&(c->scheduler), highP->context);
      switchkvm();

      c->proc = 0;
    }

    release(&ptable.lock);
  }
}
